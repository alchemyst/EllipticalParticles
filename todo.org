

* DONE Code Revisions
** DONE Changing Variables 
   To minimise ambiguity and to Structure variables to allow structures to be passed rather than variables.    
   -- Week 27 (July 2-6) and Week 29 (July 16-20)
*** DONE final.m
*** DONE calculatestress.m --- not used
*** DONE ellipse2011.m

** DONE temporary and permanent structures for disp and cohesive
** DONE Write steploads quantities to loads quantities at end of timestep. 
  Also, use loads quantities from previous timestep as first guess for steploads quantities? 
  --- No, don't need to guess steploads quantities.
** DONE subroutine to copy final timestep version back into load
** DONE 4/7/12: Need very strict rules about updating - 
can't update anything inside residual.m
** DONE Develop good rules for all variables which must be updated, when it happens, how it happens.  
   CLOCK: [2012-07-19 Thu 10:37]--[2012-07-19 Thu 12:20] =>  1:43

** DONE Sometimes I need to output phi, phiprime, psi
   CLOCK: [2012-07-20 Fri 10:28]--[2012-07-20 Fri 10:51] =>  0:23
** DONE Should SigmaBar1 be an input or should it just always be 1?  
   CLOCK: [2012-07-20 Fri 10:56]--[2012-07-20 Fri 11:03] =>  0:07
  We don't control the magnitude of loading but only the shape, so this should not be a variable
** DONE lambda and lambda_max need to be tracked throughout 
   CLOCK: [2012-07-20 Fri 11:10]--[2012-07-20 Fri 11:46] =>  0:36
** DONE Should cohesive loading/unloading decision be made on the fly or at the end of previous converged step?
   --- I think, from past experience, it's safer to use the end of previous converged step - we get convergence issues otherwise with switching back and forth
   

   
    
* DONE Run code in Matlab and in Octave 
  -- Week 30 (July 23-27)

** DONE Roll back some of read_input - Carl has hard-coded values I want to be calculated (mu, kappa, etc)
** DONE output arrays
** DONE Check eq 4.80 - have we accounted for plane stress/plane strain?
       --- I calculate kappa for plane stress and plane strain, and in fact have a parameter for plane stress or plane strain in the input file, but eq 4.80 in the derivation is only for plane strain.  
       --- Removed option of plane stress 30/7/2012


* DONE Write standard tests 
* DONE Debugging 
   -- Weeks 31 and 32 (July 30-August 10)
   -- Weeks 33-34 (August 13-August 24) 
   -- [Weeks 31 - 38 (July 30 - September 21)]

** DONE Write test for cohesive law - check that cohesive law is calculating the right things in the right way given prescribed inputs
*** DONE Mode I Tension loading
   CLOCK: [2012-08-07 Tue 13:33]--[2012-08-07 Tue 14:50] =>  1:17
*** DONE Mode I compression
*** DONE Mode II both directions
*** DONE Mode I tension unloading
*** DONE Mixed mode
*** DONE Mixed mode unloading

** DONE Test calculate_geometry.m
   CLOCK: [2012-08-11 Sat 15:15]--[2012-08-11 Sat 17:53] =>  2:38

** DONE Test averages.m
   CLOCK: [2012-08-11 Sat 18:10]--[2012-08-11 Sat 20:09] =>  1:59
*** DONE Still need a check for the 1-2 terms, need to understand what is happening with sigmap

** DONE Test almostequal.m
** DONE Test allequal.m

** DONE Test principal.m
    especially calculation of alpha in principal.m
** DONE Test unprincipal.m
   CLOCK: [2012-08-24 Fri 11:12]--[2012-08-24 Fri 11:42] =>  0:30
** DONE Test stack.m
** DONE Test unstack.m


** DONE go through code and check that I don't use == test for non-integers
** DONE replace NumPoints+1 with NumPoints

** DONE Test macrostress.m
   many many typos may introduce errors.
** DONE Rewrite point to line cross product for efficiency

** DONE Test fouriertransform.m
   -- need to check what the expected shape should be - is it being calculated correctly
      (not sure how my function interfaces with fft - weird conjugates)
** DONE number of points should be even - add assert in read_input
** DONE number of points must be bigger than number of modes - add assert in read_input

** DONE Test modes.m
** DONE timoshenko test - check correct traction direction
   -- problem comparing functions with spikes in them - allequal and almostequal don't do a good job.
   -- weird division by zero error showing up for some angles theta0 (pi/8, pi/10) 
       --- happens when theta=theta0 as input to timoshenko_potentials.  Try to think of a way of skipping those points
   -- try integrating for overall error.
   -- Is error reduced as number of modes increases --- yes.
** DONE write better error test for functions which go to infinity, exclude points which go to infinity

** Test calculatedisplacement.m
*** DONE circular equibiaxial loading
*** DONE other geometry/loading 
    --- Test extremum values for circle under general non-rotated loading - no tangential displacement.
** Test Afunc.m
*** DONE circular equibiaxial loading
*** DONE other geometry/loading 

** DONE Test read_input.m


** DONE Test initialize_loading.m
*** DONE Refactor into more useful files
*** DONE Test calculate_imposed_stress.m
   Also check that the sign of alpha is handled correctly when calculating alpha_1 and alpha_2 
    - see p.9 of Denel notebook
*** DONE Test first_guess_soln.m

** DONE Test finalize_timestep.m


** DONE Test incorporate_previous_timestep.m
   --- restructured code to remove this function.







** DONE Test farfieldpotential.m
   --- comparing to a Timoshenko solution - no agreement because Timoshenko solution is only part of the solution - superposition, must check derivations
   --- now checking for circular particle under any loading.

** DONE Failure is not starting at zero degrees even when load is applied at zero degrees.  Weird. 7/8/12

** DONE characterise accuracy of averages.m (there's this even, odd thing) --- not necessary since we must have an even number of points



* TODO Run Results and compare with previous findings for validity 
** TODO Validate against Jay's code 
   -- Week 35 (August 27-31)
   -- Weeks 39-40 (September 24-October 5)
   -- [Week 39 (September 24 - September 28]

** Check Units

** DONE Scaling
** Cohesive updating check


** TODO Experimental design
*** TODO Decide on factors that must vary - testcase.org
*** TODO Decide on levels for factors
*** TODO Decide on constraints on factor combinations
*** TODO Experimental design strategy (full factorial, Taguchi sampling, etc)
*** TODO System for generating input files
*** TODO Output results in appropriate output files
*** TODO Run code



** TODO Think about how and what to output
   -- output to json file
   --- need to make compund output file name
** TODO Output macroscopic stress and strain and plot
** TODO plot displaced shape

** DONE Problem with circle under equibiaxial loading, including theoretical derivation 
** DONE Write tests based on this derivation
** DONE Test ellipse2011.m
  --- clear that sk should have only zero mode, everything should stay real
   --- something is going wrong in going from step 1 to step 2 - everything is fine on step 1.
   --- characterise u_rho-N1 behaviour in dissertation - critical 
   --- is there a way to use variables in json file? - I suppose we could write a json file?
   --- 3-stage test (1) write json file (2) run code (3) run tests
   --- This is a test case, not a unit test.
*** DONE Check behaviour of first loadstep



** TODO Zero sigmax will be equivalent to no inclusion

** TODO Timoshenko solution for problem under farfield loading - resolve issue with incomplete solution in Timoshenko
** TODO How to test calculatedisplacement.m function for more complicated geometry/loading than circle/equibiaxial?
   --- Could just check that displacements are not tangential at extreme points of ellipse under equibiaxial loading?


** TODO Test of critical loops
   --- These can't be tested directly, but only through the test case procedure.
*** TODO Test loadsteploop.m
*** TODO Test residual.m
*** TODO Test final.m
*** TODO Test common.m



** TODO There will be a problem for the case when e_11 turns out to be zero or close to zero - include warning
** TODO Problem with the way lambda_max is being handled

** TODO How do I want to handle damage under normal compression?  
   -- At the moment I accumulate damage, but compensate for slope in normal mode.  
      But large normal compression and no shear could still result in substantial damage - this is wrong
** TODO sigma_bar_11 close to zero but not equal to zero. ---> warning



  
* DONE Get Results against test cases 
  -- Weeks 41 (October 8-12)
  -- [Weeks 43 (October 22 - 26)]

* DONE Write results into Dissertation (including conclusions) 
  -- Weeks 42-43 (October 15-26)
  -- [Weeks 44 (October 29 - November 2)]
  

* TODO Problem of loading at an angle
** DONE Fix problem with compression
   --- there was no problem in cohesive law, just a problem in overwriting data in loadsteploop
** DONE Output percentage of interface in (a) undamaged (b) damaged (c) failed (d) compression
** TODO Eliminate post.scale
** TODO Write an option for cohesive law handling of compression
** TODO All calculations based on input file should be called in read_input
** TODO Make routine to generate filename
** TODO Include options for different input specifications - i.e. specify a and b OR specify a and aspect ratio, etc
** TODO separate file called by read_input which takes a partially filled structure and produces a full structure
** TODO ellipse2011 should accept a structure instead of a file
** TODO Run some cases of loading at an angle and see how the output has changed


* TODO Derivation for equibiaxial loading of a circle - complete

* TODO Distribute to the committee for approval 
  -- Weeks 44-45 (October 29-November9) 
  -- [Weeks 45-46 (November 5 - November 16)]

* TODO Submit 
  -- (Due November 23)



* TODO Implement Optimisation Algorithms for Non-linear solver problem
** TODO Optimisation Technique that doesn't rely on gradients 
   -- Weeks 36-38 (September 3-21)
   -- [Weeks 40-42 (October 1 - October 19)]


* Documentation
** TODO Write iteration algorithm carefully for thesis
   Maps for when variables are accessed and changed. e.g. steploads quantities, disp quantities.
** TODO Document derivation of angles
** TODO Note on p.50
** TODO Add unloading path to definition of cohesive law p65
** TODO Fix integration bounds, absolute value p68
** TODO include equation for stress transformation, fix sign error p69
** TODO Sign convention for tractions on ellipse boundary, see if I can actually do a derivation to justify it.
** TODO sign of cohesive traction, and document






* Questions to be answered
** TODO Do I ever actually need to calculate the stress?  Why am I not calculating stress?
       ---Removed from subroutine farfieldstress 16/7/2012 but still need to check reasoning
** TODO Timestep shouldn't be needed in stack or unstack Carl has ideas 
   load should be an array of structures rather than a structure containing arrays
** DONE Can I have a structure of structures? i.e. step.disp.etc and final.disp.etc? or steppot.coh.phi, steppot.ff.phi?
** TODO Do I want stepsoln?
** DONE How to update one timestep of a structure without putting the structure in input as well as output parameters of function  - see unstack.m. Ask Carl
** TODO Does it matter what the units of delopen and a and b are, as long as they're the same?
** TODO Some kind of version management so I save the input file and output files - filenaming convention - so I can track what happened when I ran what.  Ask Carl
** TODO Plan known results and test code against them where it must abort if it doesn't match?
       --- Die routine - subroutine to output data before dying.

* Long term
** TODO Exploit periodicity and only integrate etc over half the ellipse
** TODO consider replacing fourier transform with fft or dft function
** TODO refactor test_macrostress to remove duplication
** TODO Cohesive behaviour under compression as a flag in input file and as a test variable in test routine
   --- see Denel notebook p 58
** TODO Cohesive formulation for frictional shear behaviour under compression




* Completed
** DONE Check definition of beta
** DONE Can't cope with zero stress in 11 direction at the moment.
        --- Derivation in Denel notebook pp 11-12, implemented in initialize_loading.m and macrostress.m 18/7/2012
** DONE Calculate phiprime2 and psiprime only when necessary - two phi functions? 
** DONE 3/7/12: Correct calculation of cohesive law - I think this needs to be rationalised and reworked.  
   Is there any reason to have separate subroutines?  
** DONE Why are we not keeping track of the previous value of lambda?  No attempt to handle unloading. 
        --- derivation 4/7/2012,
        --- implemented 4/7/2012, still need to watch for updating global values
** DONE put disp, t_coh etc into structures
  CLOCK: [2012-07-17 Tue 10:38]--[2012-07-17 Tue 11:03] =>  0:25
** DONE 5/7/12: put input file name as parameter in read_input.m
   done immediately by Carl
** DONE get code into Github
  CLOCK: [2012-07-05 Thu 10:49]--[2012-07-05 Thu 12:12] =>  1:23
** DONE subroutine to copy current timestep versions of load
** DONE common features of residual.m and final.m in a new subroutine
** DONE Macrostress needs to be more flexible so it can be called from final as well as residual
** DONE use stack and unstack in residual.m  
  CLOCK: [2012-07-17 Tue 11:03]--[2012-07-17 Tue 11:19] =>  0:16
** DONE Get Carl to help me write a better input reader/input deck (i.e. more robust)
** DONE check that I can pass structures with name changes as I do from residual to stack and unstack
** DONE Am I causing problems by storing phi, phiprime, psi instead of using and discarding them?  
       --- Do I have storage/speed issues?
       --- Perhaps I could only save them in final.m - that would mean sacrificing common.m? or setting an option?
       --- If I am saving them at each timestep it might be possible to loop more efficiently?
** DONE problem with loading angles (I don't accept omega=pi/2) see p.67 - I don't think this is a problem any longer.




